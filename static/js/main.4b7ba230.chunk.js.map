{"version":3,"sources":["movie_logo.svg","components/MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieRow","console","log","this","props","movie","title","url","id","window","location","href","key","width","src","poster_src","alt","overview","type","onClick","viewMovie","bind","value","Component","App","state","performSearch","searchTerm","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","push","setState","rows","error","xhr","status","err","event","target","className","movie_logo","onChange","searchHandleChange","placeholder","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,wC,6MCEtBC,G,0LAEnBC,QAAQC,IAAI,aACZD,QAAQC,IAAIC,KAAKC,MAAMC,MAAMC,OAC7B,IAAMC,EAAM,oCAAsCJ,KAAKC,MAAMC,MAAMG,GACnEC,OAAOC,SAASC,KAAOJ,I,+BAGd,IACDF,EAAUF,KAAKC,MAAfC,MACR,OACC,2BAAOO,IAAKP,EAAMG,IACd,+BACE,4BACE,4BACE,yBAAKK,MAAM,MAAMC,IAAKT,EAAMU,WAAYC,IAAI,YAE9C,4BACE,4BAAKX,EAAMC,OACX,2BAAID,EAAMY,UACV,2BAAOC,KAAK,SAASC,QAAShB,KAAKiB,UAAUC,KAAKlB,MAAOmB,MAAM,iB,GApBtCC,c,gBCqFvBC,E,YAjFb,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KACDqB,MAAQ,GAgBb,EAAKC,cAAc,YAlBF,E,2EAqBLC,GAAa,IAAD,OACxB1B,QAAQC,IAAI,4BACZ,IAAM0B,EAAY,4FAA8FD,EAChHE,IAAEC,KAAK,CACLvB,IAAKqB,EACLG,QAAS,SAACC,GACR/B,QAAQC,IAAI,wBACZD,QAAQC,IAAI8B,GACZ,IAAMC,EAAUD,EAAcC,QAG1BC,EAAY,GAEhBD,EAAQE,SAAQ,SAAA9B,GACdA,EAAMU,WAAa,kDAAoDV,EAAM+B,YAE7E,IAAMC,EAAW,kBAAC,EAAD,CAAUzB,IAAKP,EAAMG,GAAIH,MAAOA,IACjD6B,EAAUI,KAAKD,MAGjB,EAAKE,SAAS,CAACC,KAAMN,KAEvBO,MAAO,SAACC,EAAKC,EAAQC,GACnB3C,QAAQwC,MAAM,6B,yCAKDI,GACjB5C,QAAQC,IAAI2C,EAAMC,OAAOxB,OACzB,IACMK,EAAakB,EAAMC,OAAOxB,MADZnB,KAERuB,cAAcC,K,+BAI1B,OACE,6BACE,2BAAOoB,UAAU,YACf,+BACE,4BACE,4BACE,yBAAKlC,MAAM,KAAKC,IAAKkC,IAAYhC,IAAI,0BAEvC,wBAAIH,MAAM,MACV,4BACE,kDAMR,2BAAOkC,UAAU,YAAYE,SAAU9C,KAAK+C,mBAAmB7B,KAAKlB,MAAOgD,YAAY,sBACtFhD,KAAKsB,MAAMe,U,GA3EFjB,aCOE6B,QACW,cAA7B3C,OAAOC,SAAS2C,UAEe,UAA7B5C,OAAOC,SAAS2C,UAEhB5C,OAAOC,SAAS2C,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4b7ba230.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/movie_logo.02a9430b.svg\";","import React, { Component } from 'react';\n\nexport default class MovieRow extends Component {\n\tviewMovie() {\n\t\tconsole.log('viewMovie')\n\t\tconsole.log(this.props.movie.title)\n\t\tconst url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\n\t\twindow.location.href = url\n\t}\n\n\trender() {\n\t\tconst { movie } = this.props;\n\t\treturn (\n\t\t\t<table key={movie.id}>\n\t      <tbody>\n\t        <tr>\n\t          <td>\n\t            <img width=\"180\" src={movie.poster_src} alt=\"poster\"/>\n\t          </td>\n\t          <td>\n\t            <h3>{movie.title}</h3>\n\t            <p>{movie.overview}</p>\n\t            <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\" />\n\t          </td>\n\t        </tr>\n\t      </tbody>\n\t    </table>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport movie_logo from './movie_logo.svg';\nimport './App.css';\nimport MovieRow from './components/MovieRow';\nimport $ from 'jquery';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n    // const movies = [\n    //   {id: 0, poster_src:\"https://image.tmdb.org/t/p/w185_and_h278_bestv2/udDclJoHjfjb8Ekgsd4FDteOkCU.jpg\", title: \"Joker\", overview: \"During the 1980s, a failed stand-up comedian is driven insane and turns to a life of crime and chaos in Gotham City while becoming an infamous psychopathic crime figure.\"},\n    //   {id: 1, poster_src:\"https://image.tmdb.org/t/p/w185_and_h278_bestv2/lNnomQxXpRP9mgUwMuSZhA8LXfA.jpg\", title: \"Ad Astra\", overview: \"An astronaut travels to the outer edges of the solar system to find his father and unravel a mystery that threatens the survival of our planet. \"},\n    // ];\n  \n    // const movieRows = [];\n\n    // movies.forEach(movie => {\n    //   const movieRow = <MovieRow key={movie.id} movie={movie}/>\n    //   movieRows.push(movieRow)\n    // })\n    \n    // this.state = {\n    //   rows: movieRows\n    // } \n    this.performSearch(\"avengers\")\n  }\n\n  performSearch(searchTerm) {\n    console.log(\"performSearch on MovieDB\")\n    const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=0d44a00f64273fa5cd8ef473525a9680&query=\" + searchTerm\n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        console.log(\"fetched data success\")\n        console.log(searchResults)\n        const results = searchResults.results\n        // console.log(results[0])\n\n        var movieRows = [];\n\n        results.forEach(movie => {\n          movie.poster_src = \"https://image.tmdb.org/t/p/w185_and_h278_bestv2\" + movie.poster_path\n          // console.log(movie.poster_path)\n          const movieRow = <MovieRow key={movie.id} movie={movie}/>\n          movieRows.push(movieRow) \n        })\n\n        this.setState({rows: movieRows})\n      },\n      error: (xhr, status, err) => {\n        console.error(\"failed to fetch data\")\n      }\n    })\n  }\n\n  searchHandleChange(event) {\n    console.log(event.target.value)\n    const boundObject = this\n    const searchTerm = event.target.value\n    boundObject.performSearch(searchTerm)\n  }\n\n  render() {\n    return (\n      <div>\n        <table className=\"titleBar\">\n          <tbody>\n            <tr>\n              <td>\n                <img width=\"50\" src={movie_logo} alt=\"movie_logo_is_broken\" />\n              </td>\n              <td width=\"8\"></td>\n              <td>\n                <h1>MovieDB search</h1>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <input className=\"searchBar\" onChange={this.searchHandleChange.bind(this)} placeholder=\"Enter search term\" />\n        {this.state.rows}\n\n      </div>\n    );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}